cszStraight$centerY = 0.5 * (cszStraight$topLeftY + cszStraight$bottomRightY)
ggPlotFaultDat(faultGeom, plotData=FALSE)
ggPlotFaultDat(faultGeomStraight, plotData=FALSE, projection="rectangular", xName="topLeftX", yName="topLeftY", parameters=parameters,
xlim=NULL, ylim=NULL)
topMiddle
bottomMiddle
cbind(topMiddle, bottomMiddle)
l = max(rdist(topMiddle, bottomMiddle))
l
l = max(rdist(topMiddle, bottomMiddle)) / 10
w = max(rdist(middleRight, middleLeft)) / 2
l
w
debugSource('~/git/M9/plotSubfault.R')
l = max(rdist(topMiddle, bottomMiddle)) / 10
w = max(rdist.vec(middleRight, middleLeft))
l
w
source('~/git/M9/plotSubfault.R')
# straighten fault by putting it on a grid
faultGeomStraight = straightenFault3()
cszStraight = divideFault2(faultGeomStraight)
cszStraight$centerX = 0.5 * (cszStraight$topLeftX + cszStraight$topRightX)
cszStraight$centerY = 0.5 * (cszStraight$topLeftY + cszStraight$bottomRightY)
# can't plot this last geometry, since the projection is arbitrary and won't line up with the map
ggPlotFaultDat(faultGeom, plotData=FALSE)
ggPlotFaultDat(faultGeomStraight, plotData=FALSE, projection="rectangular", xName="topLeftX", yName="topLeftY", parameters=parameters,
xlim=NULL, ylim=NULL)
ggPlotFaultDat(cszStraight, plotData=FALSE, projection="rectangular", xName="topLeftX", yName="topLeftY", parameters=parameters,
xlim=NULL, ylim=NULL)
topI = 13
bottomI = 1
originalDist = rdist.earth(faultGeom[c(topI, bottomI), 2:3], miles=FALSE)[1, 2]
newDist = rdist(cbind(c(faultGeomStraight$topMiddleX[topI], faultGeomStraight$topMiddleX[bottomI]),
c(faultGeomStraight$topMiddleY[topI], faultGeomStraight$topMiddleY[bottomI])))[1, 2]
kmPerUnit = originalDist / newDist
kmPerUnit
strikeCoords = cbind(0, cszStraight$centerY)
dipCoords = cbind(cszStraight$centerX, 0)
newStrikeDist = rdist(strikeCoords) * kmPerUnit
newDipDist = rdist(dipCoords) * kmPerUnit
ggPlotFaultDat(csz, plotVar = newStrikeDist[120,], xlim=lonRange, ylim=latRange, clab="km",
main="New Along-Strike Distance")
ggPlotFaultDat(csz, plotVar = newDipDist[120,], xlim=lonRange, ylim=latRange, clab="km",
main="New Along-Dip Distance")
out = compute_subfault_distances(csz)
euclidDist = out$D
strikeDist = out$Dstrike
dipDist = out$Ddip
ggPlotFaultDat(csz, plotVar = strikeDist[120,], xlim=lonRange, ylim=latRange, clab="km",
main="Old Along-Strike Distance")
ggPlotFaultDat(csz, plotVar = dipDist[120,], xlim=lonRange, ylim=latRange, clab="km",
main="Old Along-Dip Distance")
debugSource('~/git/M9/plotSubfault.R')
# straighten fault by putting it on a grid
faultGeomStraight = straightenFault3()
w
mean(rdist.vec(middleRight, middleLeft))
w/mean(rdist.vec(middleRight, middleLeft))
80/60
source('~/git/M9/plotSubfault.R')
source('~/git/M9/plotSubfault.R')
# straighten fault by putting it on a grid
faultGeomStraight = straightenFault3()
cszStraight = divideFault2(faultGeomStraight)
cszStraight$centerX = 0.5 * (cszStraight$topLeftX + cszStraight$topRightX)
cszStraight$centerY = 0.5 * (cszStraight$topLeftY + cszStraight$bottomRightY)
# can't plot this last geometry, since the projection is arbitrary and won't line up with the map
ggPlotFaultDat(faultGeom, plotData=FALSE)
ggPlotFaultDat(faultGeomStraight, plotData=FALSE, projection="rectangular", xName="topLeftX", yName="topLeftY", parameters=parameters,
xlim=NULL, ylim=NULL)
ggPlotFaultDat(cszStraight, plotData=FALSE, projection="rectangular", xName="topLeftX", yName="topLeftY", parameters=parameters,
xlim=NULL, ylim=NULL)
topI = 13
bottomI = 1
originalDist = rdist.earth(faultGeom[c(topI, bottomI), 2:3], miles=FALSE)[1, 2]
newDist = rdist(cbind(c(faultGeomStraight$topMiddleX[topI], faultGeomStraight$topMiddleX[bottomI]),
c(faultGeomStraight$topMiddleY[topI], faultGeomStraight$topMiddleY[bottomI])))[1, 2]
kmPerUnit = originalDist / newDist
# calculate along strike and along dip distances in kilometers
strikeCoords = cbind(0, cszStraight$centerY)
dipCoords = cbind(cszStraight$centerX, 0)
newStrikeDist = rdist(strikeCoords) * kmPerUnit
newDipDist = rdist(dipCoords) * kmPerUnit
ggPlotFaultDat(csz, plotVar = newStrikeDist[120,], xlim=lonRange, ylim=latRange, clab="km",
main="New Along-Strike Distance")
ggPlotFaultDat(csz, plotVar = newDipDist[120,], xlim=lonRange, ylim=latRange, clab="km",
main="New Along-Dip Distance")
out = compute_subfault_distances(csz)
euclidDist = out$D
strikeDist = out$Dstrike
dipDist = out$Ddip
ggPlotFaultDat(csz, plotVar = strikeDist[120,], xlim=lonRange, ylim=latRange, clab="km",
main="Old Along-Strike Distance")
ggPlotFaultDat(csz, plotVar = dipDist[120,], xlim=lonRange, ylim=latRange, clab="km",
main="Old Along-Dip Distance")
source('~/git/M9/plotSubfault.R')
source('~/git/M9/setup.R')
depthThresh=21000
nKnots = 5
nKnotsGPS = 5
dStar=25000
set.seed(123)
threshSlipDat = slipDatCSZ[slipDatCSZ$Depth<depthThresh,]
threshSlipDat$slipErr = threshSlipDat$slipErr*3
minLat = min(c(csz$latitude, threshSlipDat$lat)) - .001
maxLat = max(c(csz$latitude, threshSlipDat$lat)) + .001
highQual = as.numeric(dr1$quality) == 1
lowQual = as.numeric(dr1$quality) != 1
lowInflate=1.75
lowInflateComb=1.75
lowInflateDiff=1.75
highInflate=1.25
highInflateComb=1.25
highInflateDiff=1.25
inflateDr1=dr1
inflateDr1$Uncertainty[lowQual] = inflateDr1$Uncertainty[lowQual]*lowInflateComb
inflateDr1$Uncertainty[highQual] = inflateDr1$Uncertainty[highQual]*highInflateComb
## fit the model (twice, with second time on smaller parameter scale to ensure
## near optimum for hessian calculations)
initPar=c(20,15, 1, rep(0, nKnots-1), 175, 1)
source('~/git/M9/test.R')
debugSource('~/git/M9/fitModel.R')
fit = fitModel2(initParams=initPar, dStar=dStar, gpsDat=threshSlipDat,
useGrad=TRUE, nKnots=nKnots, maxit=500, G=G, corGPS=TRUE,
fauxG=fauxG, subDat=inflateDr1, fault=csz, latRange=c(minLat, maxLat),
normalModel=TRUE, normalizeTaper=TRUE, doHess=FALSE, anisotropic=TRUE)
testNumeric = corGradNumeric(params, distMatCSZ, 1)
testNumeric[1:5]
dim(testNumeric)
head(testNumeric)
testAnalytic = corrGrad(distMatCSZ, phiZeta, corMatCSZ, anisotropic, alpha, squareStrikeDistCsz, squareDipDistCsz)
head(testAnalytic)
dim(testAnalytic)
class(testAnalytic)
names(testAnalytic)
dim(testAnalytic$dphi)
head(testAnalytic$dphi[,1])
head(testAnalytic$alpha[,1])
head(testAnalytic$dalpha[,1])
tail(testNumeric)
range(testNumeric[,8])
debugSource('~/git/M9/test.R')
testNumeric = corGradNumeric(params, distMatCSZ, 1, anisotropic, squareStrikeDistCsz, squareDipDistCsz)
source('~/git/M9/test.R')
debugSource('~/git/M9/fitModel.R')
fit = fitModel2(initParams=initPar, dStar=dStar, gpsDat=threshSlipDat,
useGrad=TRUE, nKnots=nKnots, maxit=500, G=G, corGPS=TRUE,
fauxG=fauxG, subDat=inflateDr1, fault=csz, latRange=c(minLat, maxLat),
normalModel=TRUE, normalizeTaper=TRUE, doHess=FALSE, anisotropic=TRUE)
testNumeric = corGradNumeric(params, distMatCSZ, 1, anisotropic, squareStrikeDistCsz, squareDipDistCsz)
testAnalytic = corrGrad(distMatCSZ, phiZeta, corMatCSZ, anisotropic, alpha, squareStrikeDistCsz, squareDipDistCsz)
head(testNumeric)
head(cbind(testAnalytic$dphi[,1], testAnalytic$dalpha[,1]))
phiZeta
corMat[1:5, 1:5]
corMatCSZ[1:5, 1:5]
debugSource('~/git/M9/fitModel2.R')
testAnalytic = corrGrad(distMatCSZ, phiZeta, corMatCSZ, anisotropic, alpha, squareStrikeDistCsz, squareDipDistCsz)
denominator[1:5, 1:5]
numerator[1:5, 1:5]
alpha
debugSource('~/git/M9/fitModel2.R')
source('~/git/M9/fitModel2.R')
testAnalytic = corrGrad(distMatCSZ, phiZeta, corMatCSZ, anisotropic, alpha, squareStrikeDistCsz, squareDipDistCsz)
head(cbind(testAnalytic$dphi[,1], testAnalytic$dalpha[,1]))
head(testNumeric)
source('~/git/M9/fitModel2.R')
testAnalytic = corrGrad(distMatCSZ, phiZeta, corMatCSZ, anisotropic, alpha, squareStrikeDistCsz, squareDipDistCsz)
head(cbind(testAnalytic$dphi[,1], testAnalytic$dalpha[,1]))
head(testNumeric)
fit = fitModel2(initParams=initPar, dStar=dStar, gpsDat=threshSlipDat,
useGrad=TRUE, nKnots=nKnots, maxit=500, G=G, corGPS=TRUE,
fauxG=fauxG, subDat=inflateDr1, fault=csz, latRange=c(minLat, maxLat),
normalModel=TRUE, normalizeTaper=TRUE, doHess=FALSE, anisotropic=TRUE)
jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDat)
subGrad + GPSGrad + priorGrad
jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDatZ,
normalizeTaper=normalizeTaper)
jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDat,
normalizeTaper=normalizeTaper)
jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDat,
normalizeTaper=normalizeTaper, diffGPSTaper=diffGPSTaper, nKnotsGPS=nKnotsGPS)
subGrad + GPSGrad + priorGrad
taperedGPSDat
source('~/git/M9/test.R')
test = covYGradNumeric(params, corMatCSZL, G, nKnots, normalizeTaper, subDat, fault, corZeta, colNum=1, dStar, latRange, normalModel,
anisotropic, squareDipDistCsz, squareStrikeDistCsz)
options(error=recover)
test = covYGradNumeric(params, corMatCSZL, G, nKnots, normalizeTaper, subDat, fault, corZeta, colNum=1, dStar, latRange, normalModel,
anisotropic, squareDipDistCsz, squareStrikeDistCsz)
# corGradNumeric(params, distMatCSZ, 1, anisotropic, squareStrikeDistCsz, squareDipDistCsz)
# corrGrad(distMatCSZ, phiZeta, corMatCSZ, anisotropic, alpha, squareStrikeDistCsz, squareDipDistCsz)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
#          useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
#          fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
#          anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
#          squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDat,
#          normalizeTaper=normalizeTaper, diffGPSTaper=diffGPSTaper, nKnotsGPS=nKnotsGPS)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, verbose=FALSE, method.args=list(d=.0000001),
# phiZeta=phiZeta, useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior, fauxG=fauxG)
test = covYGradNumeric(params, corMatCSZL, G, nKnots, normalizeTaper, subDat, fault, corZeta, colNum=1, dStar, latRange, normalModel,
taperedGPSDat, distMatCSZ, cszDepths, anisotropic, squareDipDistCsz, squareStrikeDistCsz)
# corGradNumeric(params, distMatCSZ, 1, anisotropic, squareStrikeDistCsz, squareDipDistCsz)
# corrGrad(distMatCSZ, phiZeta, corMatCSZ, anisotropic, alpha, squareStrikeDistCsz, squareDipDistCsz)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
#          useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
#          fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
#          anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
#          squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDat,
#          normalizeTaper=normalizeTaper, diffGPSTaper=diffGPSTaper, nKnotsGPS=nKnotsGPS)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, verbose=FALSE, method.args=list(d=.0000001),
# phiZeta=phiZeta, useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior, fauxG=fauxG)
test = covYGradNumeric(params, corMatCSZL, G, nKnots, normalizeTaper, subDat, fault, corZeta, colNum=1, dStar, latRange, normalModel,
taperedGPSDat, distMatCSZ, cszDepths, anisotropic, squareDipDist=squareDipDistCsz, squareStrikeDist=squareStrikeDistCsz)
# corGradNumeric(params, distMatCSZ, 1, anisotropic, squareStrikeDistCsz, squareDipDistCsz)
# corrGrad(distMatCSZ, phiZeta, corMatCSZ, anisotropic, alpha, squareStrikeDistCsz, squareDipDistCsz)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
#          useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
#          fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
#          anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
#          squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDat,
#          normalizeTaper=normalizeTaper, diffGPSTaper=diffGPSTaper, nKnotsGPS=nKnotsGPS)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, verbose=FALSE, method.args=list(d=.0000001),
# phiZeta=phiZeta, useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior, fauxG=fauxG)
test = covYGradNumeric(params, G, nKnots, normalizeTaper, subDat, fault, colNum=1, dStar, latRange, normalModel,
taperedGPSDat, distMatCSZ, cszDepths, anisotropic, squareDipDistCsz, squareStrikeDistCsz)
source('~/git/M9/test.R')
# corGradNumeric(params, distMatCSZ, 1, anisotropic, squareStrikeDistCsz, squareDipDistCsz)
# corrGrad(distMatCSZ, phiZeta, corMatCSZ, anisotropic, alpha, squareStrikeDistCsz, squareDipDistCsz)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
#          useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
#          fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
#          anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
#          squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDat,
#          normalizeTaper=normalizeTaper, diffGPSTaper=diffGPSTaper, nKnotsGPS=nKnotsGPS)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, verbose=FALSE, method.args=list(d=.0000001),
# phiZeta=phiZeta, useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior, fauxG=fauxG)
test = covYGradNumeric(params, G, nKnots, normalizeTaper, subDat, fault, colNum=1, dStar, latRange, normalModel,
taperedGPSDat, distMatCSZ, cszDepths, anisotropic, squareDipDistCsz, squareStrikeDistCsz)
source('~/git/M9/test.R')
# corGradNumeric(params, distMatCSZ, 1, anisotropic, squareStrikeDistCsz, squareDipDistCsz)
# corrGrad(distMatCSZ, phiZeta, corMatCSZ, anisotropic, alpha, squareStrikeDistCsz, squareDipDistCsz)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
#          useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
#          fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
#          anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
#          squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDat,
#          normalizeTaper=normalizeTaper, diffGPSTaper=diffGPSTaper, nKnotsGPS=nKnotsGPS)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, verbose=FALSE, method.args=list(d=.0000001),
# phiZeta=phiZeta, useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior, fauxG=fauxG)
test = covYGradNumeric(params, G, nKnots, normalizeTaper, subDat, fault, colNum=1, dStar, latRange, normalModel,
taperedGPSDat, distMatCSZ, cszDepths, anisotropic, squareDipDistCsz, squareStrikeDistCsz)
source('~/git/M9/test.R')
# corGradNumeric(params, distMatCSZ, 1, anisotropic, squareStrikeDistCsz, squareDipDistCsz)
# corrGrad(distMatCSZ, phiZeta, corMatCSZ, anisotropic, alpha, squareStrikeDistCsz, squareDipDistCsz)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
#          useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
#          fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
#          anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
#          squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDat,
#          normalizeTaper=normalizeTaper, diffGPSTaper=diffGPSTaper, nKnotsGPS=nKnotsGPS)
# jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, verbose=FALSE, method.args=list(d=.0000001),
# phiZeta=phiZeta, useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior, fauxG=fauxG)
test = covYGradNumeric(params, G, nKnots, normalizeTaper, subDat, fault, colNum=1, dStar, latRange, normalModel,
taperedGPSDat, distMatCSZ, cszDepths, anisotropic, squareDipDistCsz, squareStrikeDistCsz)
dim(SigmaYGrad)
head(SigmaYGrad[,1,])
head(test)
subGrad
GPSGrad
source('~/git/M9/test.R')
test = covXGradNumeric(params, nKnots=nKnotsGPS, normalizeTaper=normalizeTaper, gpsDat=gpsDat,
colNum=1, dStar=dStar, latRange=latRange, normalModel=normalModel,
taperedGPSDat=taperedGPSDat, distMatGPS=distMatGPS, corGPS=corGPS, anisotropic=anisotropic,
squareDipDist=squareDipDistGps, squareStrikeDist=squareStrikeDistGps)
source('~/git/M9/test.R')
test = covXGradNumeric(params, nKnots=nKnotsGPS, normalizeTaper=normalizeTaper, gpsDat=gpsDat,
colNum=1, dStar=dStar, latRange=latRange, normalModel=normalModel,
taperedGPSDat=taperedGPSDat, distMatGPS=distMatGPS, corGPS=corGPS, anisotropic=anisotropic,
squareDipDist=squareDipDistGps, squareStrikeDist=squareStrikeDistGps)
head(test)
debugSource('~/git/M9/fitModel.R')
GPSGrad = GPSLnLikGrad(muZeta, sigmaZeta, gpsDat, nKnots=nKnots, normalModel=normalModel,
corMatGPS=corMatGPS, nPar=length(params), phiZeta=phiZeta,
distMatGPS=distMatGPS, taperedGPSDat=taperedGPSDat, tvecGPS=tvecGPS,
dStar=dStar, latRange=latRange, fault=fault, normalizeTaper=normalizeTaper,
lambda=lambdaGPS, corGPS=corGPS, diffGPSTaper=diffGPSTaper,
anisotropic=anisotropic, alpha=alpha,
squareStrikeDist=squareStrikeDistGps,
squareDipDist=squareDipDistGps)
# compute gradient of Sigma_X:
SigmaGrad = covXGrad(muZeta, sigmaZeta, tvecGPS, tGrad, corMatGPS, nPar, distMatGPS,
phiZeta, gpsDat, normalModel, taperedGPSDat, corGPS,
anisotropic, alpha, squareStrikeDist, squareDipDist)
head(SigmaGrad[,1])
head(SigmaGrad[,1,])
debugSource('~/git/M9/fitModel.R')
fit = fitModel2(initParams=initPar, dStar=dStar, gpsDat=threshSlipDat,
useGrad=TRUE, nKnots=nKnots, maxit=500, G=G, corGPS=TRUE,
fauxG=fauxG, subDat=inflateDr1, fault=csz, latRange=c(minLat, maxLat),
normalModel=TRUE, normalizeTaper=TRUE, doHess=FALSE, anisotropic=TRUE)
debugSource('~/git/M9/fitModel.R')
fit = fitModel2(initParams=initPar, dStar=dStar, gpsDat=threshSlipDat,
useGrad=TRUE, nKnots=nKnots, maxit=500, G=G, corGPS=TRUE,
fauxG=fauxG, subDat=inflateDr1, fault=csz, latRange=c(minLat, maxLat),
normalModel=TRUE, normalizeTaper=TRUE, doHess=FALSE, anisotropic=TRUE)
jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDat,
normalizeTaper=normalizeTaper, diffGPSTaper=diffGPSTaper, nKnotsGPS=nKnotsGPS)
subGrad + GPSGrad + priorGrad
GPSGrad
subGrad
is.null(corMatGPS)
debugSource('~/git/M9/fitModel.R')
GPSGrad = GPSLnLikGrad(muZeta, sigmaZeta, gpsDat, nKnots=nKnots, normalModel=normalModel,
corMatGPS=corMatGPS, nPar=length(params), phiZeta=phiZeta,
distMatGPS=distMatGPS, taperedGPSDat=taperedGPSDat, tvecGPS=tvecGPS,
dStar=dStar, latRange=latRange, fault=fault, normalizeTaper=normalizeTaper,
lambda=lambdaGPS, corGPS=corGPS, diffGPSTaper=diffGPSTaper,
anisotropic=anisotropic, alpha=alpha,
squareStrikeDist=squareStrikeDistGps,
squareDipDist=squareDipDistGps)
debugSource('~/git/M9/fitModel.R')
debugSource('~/git/M9/fitModel.R')
GPSGrad = GPSLnLikGrad(muZeta, sigmaZeta, gpsDat, nKnots=nKnots, normalModel=normalModel,
corMatGPS=corMatGPS, nPar=length(params), phiZeta=phiZeta,
distMatGPS=distMatGPS, taperedGPSDat=taperedGPSDat, tvecGPS=tvecGPS,
dStar=dStar, latRange=latRange, fault=fault, normalizeTaper=normalizeTaper,
lambda=lambdaGPS, corGPS=corGPS, diffGPSTaper=diffGPSTaper,
anisotropic=anisotropic, alpha=alpha,
squareStrikeDist=squareStrikeDistGps,
squareDipDist=squareDipDistGps)
range(expectX)
muZeta
gammaEst
for(i in 1:nPar) {
# gradient of X^T Sigma^-1 X
xQuad[i] = -t(x) %*% dSigmaXInv[,,i] %*% x
# gradient of -2 X^T Sigma^-1 mu_X
xMuQuad[i] = -2*(t(x) %*% SigmaXInv %*% ExpXGrad[,i] - t(x) %*% dSigmaXInv[,,i] %*% expectX)
# gradient of mu_X^T Sigma_X^-1 mu_X
muQuad[i] = t(expectX) %*% SigmaXInv %*% ExpXGrad[,i] - t(expectX) %*% dSigmaXInv[,,i] %*% expectX +
t(ExpXGrad[,i]) %*% SigmaXInv %*% expectX
# gradient of log|Sigma_X|
logDet[i] = sum(diag(SigmaXInv %*% SigmaGrad[,,i]))
}
logDet = 1:nPar
for(i in 1:nPar) {
# gradient of X^T Sigma^-1 X
xQuad[i] = -t(x) %*% dSigmaXInv[,,i] %*% x
# gradient of -2 X^T Sigma^-1 mu_X
xMuQuad[i] = -2*(t(x) %*% SigmaXInv %*% ExpXGrad[,i] - t(x) %*% dSigmaXInv[,,i] %*% expectX)
# gradient of mu_X^T Sigma_X^-1 mu_X
muQuad[i] = t(expectX) %*% SigmaXInv %*% ExpXGrad[,i] - t(expectX) %*% dSigmaXInv[,,i] %*% expectX +
t(ExpXGrad[,i]) %*% SigmaXInv %*% expectX
# gradient of log|Sigma_X|
logDet[i] = sum(diag(SigmaXInv %*% SigmaGrad[,,i]))
}
xQuad
xMuQuad
muQuad
logDet
Cx[1:5, 1:5]
range(Cx)
head(ExpXGrad)
source('~/git/M9/test.R')
jacobian(subsidenceLnLikMod2Test, params, distMatCSZ=distMatCSZ, gpsDat=gpsDat, subDat=subDat,
G=G, nKnots=nKnots, normalizeTaper=normalizeTaper, dStar=dStar, fault=fault, latRange=latRange,
normalModel=normalModel, taperedGPSDat=taperedGPSDat, anisotropic=anisotropic,
squareStrikeDistCsz=squareStrikeDistCsz, squareDipDistCsz=squareDipDistCsz)
source('~/git/M9/test.R')
source('~/git/M9/test.R')
jacobian(subsidenceLnLikMod2Test, params, distMatCSZ=distMatCSZ, gpsDat=gpsDat, subDat=subDat,
G=G, nKnots=nKnots, normalizeTaper=normalizeTaper, dStar=dStar, fault=fault, latRange=latRange,
normalModel=normalModel, taperedGPSDat=taperedGPSDat, anisotropic=anisotropic,
squareStrikeDistCsz=squareStrikeDistCsz, squareDipDistCsz=squareDipDistCsz)
source('~/git/M9/test.R')
jacobian(subsidenceLnLikMod2Test, params, distMatCSZ=distMatCSZ, gpsDat=gpsDat, subDat=subDat,
G=G, nKnots=nKnots, normalizeTaper=normalizeTaper, dStar=dStar, fault=fault, latRange=latRange,
normalModel=normalModel, taperedGPSDat=taperedGPSDat, anisotropic=anisotropic,
squareStrikeDistCsz=squareStrikeDistCsz, squareDipDistCsz=squareDipDistCsz)
subGrad
source('~/git/M9/test.R')
jacobian(subsidenceLnLikMod2Test, params, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, gpsDat=gpdDat,
subDat=subDat, muZeta=muZeta, G=G, nKnots=nKnots, normalizeTaper=normalizeTaper, dStar=dStar,
fault=fault, latRange=latRange, normalModel=normalModel, anisotropic=anisotropic,
squareStrikeDistGps=squareStrikeDistGps, squareDipDistGps=squareDipDistGps)
jacobian(GPSLnLikTest, params, gpsDat=gpsDat, fault=fault, muZeta=muZeta, normalizeTaper=normalizeTaper, G=G,
dStar=dStar, latRange=latRange, normalModel=normalModel, taperedGPSDat=taperedGPSDat,
anisotropic=anisotropic, squareStrikeDistGps=squareStrikeDistGps, squareDipDistGps=squareDipDistGps)
source('~/git/M9/test.R')
jacobian(GPSLnLikTest, params, gpsDat=gpsDat, fault=fault, muZeta=muZeta, normalizeTaper=normalizeTaper, G=G,
dStar=dStar, latRange=latRange, normalModel=normalModel, taperedGPSDat=taperedGPSDat,
anisotropic=anisotropic, squareStrikeDistGps=squareStrikeDistGps, squareDipDistGps=squareDipDistGps)
GPSGrad
testGps = jacobian(GPSLnLikTest, params, gpsDat=gpsDat, fault=fault, muZeta=muZeta, normalizeTaper=normalizeTaper, G=G,
dStar=dStar, latRange=latRange, normalModel=normalModel, taperedGPSDat=taperedGPSDat,
anisotropic=anisotropic, squareStrikeDistGps=squareStrikeDistGps, squareDipDistGps=squareDipDistGps)
jacobian(fixedDataLogLik, params, cszDepths=cszDepths, corMatGPS=corMatGPS, corMatCSZL=corMatCSZL, fault=fault, verbose=FALSE,
useMVNApprox=TRUE, G=G, nKnots=nKnots, dStar=dStar, useSubPrior=useSubPrior, useSlipPrior=useSlipPrior,
fauxG=fauxG, constrLambda=constrLambda, latRange=latRange, normalModel=normalModel, gpsDat=gpsDat, subDat=subDat,
anisotropic=anisotropic, squareDipDistGps=squareDipDistGps, squareStrikeDistGps=squareStrikeDistGps,
squareDipDistCsz=squareDipDistCsz, squareStrikeDistCsz=squareStrikeDistCsz, taperedGPSDat=taperedGPSDat,
normalizeTaper=normalizeTaper, diffGPSTaper=diffGPSTaper, nKnotsGPS=nKnotsGPS)
subGrad + testGps
debugSource('~/git/M9/fitModel.R')
GPSGrad = GPSLnLikGrad(muZeta, sigmaZeta, gpsDat, nKnots=nKnots, normalModel=normalModel,
corMatGPS=corMatGPS, nPar=length(params), phiZeta=phiZeta,
distMatGPS=distMatGPS, taperedGPSDat=taperedGPSDat, tvecGPS=tvecGPS,
dStar=dStar, latRange=latRange, fault=fault, normalizeTaper=normalizeTaper,
lambda=lambdaGPS, corGPS=corGPS, diffGPSTaper=diffGPSTaper,
anisotropic=anisotropic, alpha=alpha,
squareStrikeDist=squareStrikeDistGps,
squareDipDist=squareDipDistGps)
ExpXGrad
head(ExpXGrad)
jacobian(expXNumeric, params, gpsDat=gpsDat, nKnots=nKnots, latRange=latRange,
dStar=dStar, normalizeTaper=normalizeTaper, taperedGPSDat=taperedGPSDat,
normalModel=normalModel)
jacobian(expXNumeric, params, gpsDat=gpsDat, nKnots=nKnotsGPS, latRange=latRange,
dStar=dStar, normalizeTaper=normalizeTaper, taperedGPSDat=taperedGPSDat,
normalModel=normalModel)
# mean of X
head(jacobian(expXNumeric, params, gpsDat=gpsDat, nKnots=nKnotsGPS, latRange=latRange,
dStar=dStar, normalizeTaper=normalizeTaper, taperedGPSDat=taperedGPSDat,
normalModel=normalModel))
GPSGrad = GPSLnLikGrad(muZeta, sigmaZeta, gpsDat, nKnots=nKnots, normalModel=normalModel,
corMatGPS=corMatGPS, nPar=length(params), phiZeta=phiZeta,
distMatGPS=distMatGPS, taperedGPSDat=taperedGPSDat, tvecGPS=tvecGPS,
dStar=dStar, latRange=latRange, fault=fault, normalizeTaper=normalizeTaper,
lambda=lambdaGPS, corGPS=corGPS, diffGPSTaper=diffGPSTaper,
anisotropic=anisotropic, alpha=alpha,
squareStrikeDist=squareStrikeDistGps,
squareDipDist=squareDipDistGps)
head(ExpXGrad)
source('~/git/M9/test.R')
jacobian(covXInvGradNumeric, params, nKnots=nKnots, normalizeTaper=normalizedTaper, gpsDat=gpsDat, colNum=1,
dStar=dStar, latRange=latRange, normalModel=normalModel, taperedGPSDat=taperedGPSDat,
distMatGPS=distMatGPS, anisotropic=anisotropic, squareDipDist=squareDipDist,
squareStrikeDist=squareStrikeDist)
testNumeric = jacobian(covXInvGradNumeric, params, nKnots=nKnots, normalizeTaper=normalizedTaper, gpsDat=gpsDat, colNum=1,
dStar=dStar, latRange=latRange, normalModel=normalModel, taperedGPSDat=taperedGPSDat,
distMatGPS=distMatGPS, anisotropic=anisotropic, squareDipDist=squareDipDist,
squareStrikeDist=squareStrikeDist)
jacobian(covXInvGradNumeric, params, nKnots=nKnots, normalizeTaper=normalizeTaper, gpsDat=gpsDat, colNum=1,
dStar=dStar, latRange=latRange, normalModel=normalModel, taperedGPSDat=taperedGPSDat,
distMatGPS=distMatGPS, anisotropic=anisotropic, squareDipDist=squareDipDist,
squareStrikeDist=squareStrikeDist)
testNumeric = jacobian(covXInvGradNumeric, params, nKnots=nKnots, normalizeTaper=normalizeTaper, gpsDat=gpsDat, colNum=1,
dStar=dStar, latRange=latRange, normalModel=normalModel, taperedGPSDat=taperedGPSDat,
distMatGPS=distMatGPS, anisotropic=anisotropic, squareDipDist=squareDipDist,
squareStrikeDist=squareStrikeDist)
dim(testNumeric)
head(testNumeric)
params
debugSource('~/git/M9/fitModel.R')
GPSGrad = GPSLnLikGrad(muZeta, sigmaZeta, gpsDat, nKnots=nKnots, normalModel=normalModel,
corMatGPS=corMatGPS, nPar=length(params), phiZeta=phiZeta,
distMatGPS=distMatGPS, taperedGPSDat=taperedGPSDat, tvecGPS=tvecGPS,
dStar=dStar, latRange=latRange, fault=fault, normalizeTaper=normalizeTaper,
lambda=lambdaGPS, corGPS=corGPS, diffGPSTaper=diffGPSTaper,
anisotropic=anisotropic, alpha=alpha,
squareStrikeDist=squareStrikeDistGps,
squareDipDist=squareDipDistGps)
dim(dSigmaXInv)
head(dSigmaXInv[,1,])
head(testNumeric)
source('~/git/M9/test.R')
testNumeric = jacobian(covXInvGradNumeric, params, nKnots=nKnots, normalizeTaper=normalizeTaper, gpsDat=gpsDat, colNum=1,
dStar=dStar, latRange=latRange, normalModel=normalModel, taperedGPSDat=taperedGPSDat,
distMatGPS=distMatGPS, anisotropic=anisotropic, squareDipDist=squareDipDist,
squareStrikeDist=squareStrikeDist)
testNumeric = jacobian(covXInvGradNumeric, params, nKnots=nKnotsGPS, normalizeTaper=normalizeTaper, gpsDat=gpsDat, colNum=1,
dStar=dStar, latRange=latRange, normalModel=normalModel, taperedGPSDat=taperedGPSDat,
distMatGPS=distMatGPS, anisotropic=anisotropic, squareDipDist=squareDipDistGps,
squareStrikeDist=squareStrikeDistGps)
source('~/git/M9/test.R')
GPSGrad = GPSLnLikGrad(muZeta, sigmaZeta, gpsDat, nKnots=nKnots, normalModel=normalModel,
corMatGPS=corMatGPS, nPar=length(params), phiZeta=phiZeta,
distMatGPS=distMatGPS, taperedGPSDat=taperedGPSDat, tvecGPS=tvecGPS,
dStar=dStar, latRange=latRange, fault=fault, normalizeTaper=normalizeTaper,
lambda=lambdaGPS, corGPS=corGPS, diffGPSTaper=diffGPSTaper,
anisotropic=anisotropic, alpha=alpha,
squareStrikeDist=squareStrikeDistGps,
squareDipDist=squareDipDistGps)
head(dSigmaXInv[,1,])
head(testNumeric)
test = jacobian(taperVals, params, depths=cszDepths, Xi=Xi, dStar=dStar, normalizeTaper=normalizeTaper)
head(test)
source('~/git/M9/fitModel2.R')
source('~/git/M9/test.R')
source('~/git/M9/setup.R')
