numUrban
numRural
sum(probs)
sum(thisCountyI)
countyName
SRS
thisclustpcI
# urban samples
thisCountyI = countyI & urban
probs = thisCountyI * eaDat$nHH
probs = probs/sum(probs)
sum(probs)
# urban samples
thisCountyI = countyI & urban
sum(thisCountyI)
sum(eaDat$nHH)
head(eaDat)
debugSource('~/git/U5MR/simStudy.R')
debugSource('~/git/U5MR/simStudy.R')
debugSource('~/git/U5MR/simStudy.R')
debugSource('~/git/U5MR/simStudy.R')
debugSource('~/git/U5MR/simStudy.R')
debugSource('~/git/U5MR/simStudy.R')
nsim=100
nsimBig = 250
set.seed(580252)
beta0 = -1.75
margVar = .15^2
tausq = .1^2
gamma = -1
# HHoldVar = .3^2
HHoldVar = 0
# urbanOverSample = 2
effRange = 150
# urbanOverSamplefrac = 0.25
urbanOverSamplefrac = 0
# there should be 1 true data set, but many simulated cluster samples
# simulatedEAs = simDat2(kenyaEAs, clustDat=NULL, nsim=1, urbanOverSample=urbanOverSample,
#                        beta0=beta0, margVar=margVar, tausq=tausq, gamma=gamma, HHoldVar=HHoldVar,
#                        effRange=effRange)
load("empiricalDistributions.RData")
simulatedEAs = simDatEmpirical(empiricalDistributions, kenyaEAs, clustDat=NULL, nsim=1,
beta0=beta0, margVar=margVar, urbanOverSamplefrac=urbanOverSamplefrac,
tausq=tausq, gamma=gamma, HHoldVar=HHoldVar, effRange=effRange)
kenyaEAs = simulatedEAs$eaDat
kenyaEAs$eaIs = 1:nrow(kenyaEAs)
kenyaEAsLong = kenyaEAs[rep(1:nrow(kenyaEAs), kenyaEAs$nHH),]
set.seed(1234)
# simulate the cluster sampling and add to the data sets
# overSampClustDat = simClusters3(kenyaEAs, urbanOverSample=urbanOverSample, nsim=nsim)
# overSampClustDat = simClustersEmpirical(kenyaEAs, kenyaEAsLong, nsim, NULL, 0, 25,
#                                         urbanOverSamplefrac)
# temp = simClustersEmpirical(kenyaEAs, kenyaEAsLong, 2, NULL, urbanOverSamplefrac, verbose=FALSE, SRS = TRUE)
# out = profvis({temp = simClustersEmpirical(kenyaEAs, kenyaEAsLong, 5, NULL, urbanOverSamplefrac, verbose=FALSE)})
overSampClustDat = simClustersEmpirical(kenyaEAs, kenyaEAsLong, nsimBig, NULL, urbanOverSamplefrac, verbose=FALSE)
overSampClustDat = simClustersEmpirical(kenyaEAs, kenyaEAsLong, nsimBig, NULL, urbanOverSamplefrac, verbose=FALSE)
clustList = genAndreaFormatFromEAIs(simulatedEAs$eaDat, overSampClustDat$eaIs, overSampClustDat$sampleWeights)
overSampDat = list(eaDat=simulatedEAs$eaDat, clustDat=clustList)
overSampClustDatTest = simClustersEmpirical(kenyaEAs, kenyaEAsLong, nsimBig, NULL, urbanOverSamplefrac, fixedPerStrata=TRUE, nPerStrata=3, verbose=FALSE)
clustListTest = genAndreaFormatFromEAIs(simulatedEAs$eaDat, overSampClustDatTest$eaIs, overSampClustDatTest$sampleWeights)
overSampDatTest = list(eaDat=simulatedEAs$eaDat, clustDat=clustListTest)
# SRSClustDat = simClusters3(kenyaEAs, urbanOverSample=1, nsim=nsim)
# SRSClustDat = simClustersEmpirical(kenyaEAs, kenyaEAsLong, nsim, NULL, 0, 25)
SRSClustDat = simClustersEmpirical(kenyaEAs, kenyaEAsLong, nsimBig, NULL, SRS=TRUE, verbose=FALSE)
clustList = genAndreaFormatFromEAIs(simulatedEAs$eaDat, SRSClustDat$eaIs, SRSClustDat$sampleWeights)
SRSDat = list(eaDat=simulatedEAs$eaDat, clustDat=clustList) # the only thing different is the sampling of the clusters
SRSClustDatTest = simClustersEmpirical(kenyaEAs, kenyaEAsLong, nsimBig, NULL, fixedPerStrata=TRUE, nPerStrata=3, SRS=TRUE, verbose=FALSE)
clustListTest = genAndreaFormatFromEAIs(simulatedEAs$eaDat, SRSClustDatTest$eaIs, SRSClustDatTest$sampleWeights)
SRSDatTest = list(eaDat=simulatedEAs$eaDat, clustDat=clustListTest) # the only thing different is the sampling of the clusters
# plot the first simulation of the over sampled and simple random sample data sets
clustDat = SRSDat$clustDat[[1]]
# clustDat = overSampDat$clustDat[[1]]
eaDat = overSampDat$eaDat
pdf("figures/exampleSRSSimulation.pdf", width=8, height=8)
par(mfrow =c(2, 2))
obsCoords = cbind(clustDat$east, clustDat$north)
obsNs = clustDat$numChildren
obsCounts = clustDat$died
zlim = c(0, quantile(c(eaDat$died/eaDat$numChildren, clustDat$died/clustDat$numChildren,
eaDat$trueProbDeath), probs=.975))
quilt.plot(eaDat$east, eaDat$north, eaDat$died/eaDat$numChildren, main="All Empirical Mortality Rates",
xlab="Easting", ylab="Northing", xlim=eastLim, ylim=northLim, zlim=zlim)
plotMapDat(project=TRUE)
quilt.plot(obsCoords, obsCounts/obsNs, main="Sample Empirical Mortality Rates",
xlab="Easting", ylab="Northing", xlim=eastLim, ylim=northLim, zlim=zlim)
plotMapDat(project=TRUE)
quilt.plot(eaDat$east, eaDat$north, eaDat$trueProbDeath, main="All True Mortality Rates",
xlab="Easting", ylab="Northing", xlim=eastLim, ylim=northLim, zlim=zlim)
plotMapDat(project=TRUE)
quilt.plot(obsCoords, clustDat$trueProbDeath, main="Sample True Mortality Rates",
xlab="Easting", ylab="Northing", xlim=eastLim, ylim=northLim, zlim=zlim)
plotMapDat(project=TRUE)
dev.off()
# save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
#                                       round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOver",
#                                       round(urbanOverSample, 4), ".RData"))
# save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
#                                       round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "nUrbanClustersOver",
#                                       round(numClustersUrbanOversamp, 4), ".RData"))
save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOverSamplefrac",
round(urbanOverSamplefrac, 4), "Big.RData"))
overSampDat = overSampDatTest
SRSDat = SRSDatTest
save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOverSamplefrac",
round(urbanOverSamplefrac, 4), "TestBig.RData"))
out = load(paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOverSamplefrac",
round(urbanOverSamplefrac, 4), "Big.RData"))
overSampDat$clustDat = overSampDat$clustDat[1:nsim]
SRSDat$clustDat = SRSDat$clustDat[1:nsim]
save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOverSamplefrac",
round(urbanOverSamplefrac, 4), ".RData"))
overSampDat = overSampDatTest
SRSDat = SRSDatTest
overSampDat$clustDat = overSampDat$clustDat[1:nsim]
SRSDat$clustDat = SRSDat$clustDat[1:nsim]
save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOverSamplefrac",
round(urbanOverSamplefrac, 4), "Test.RData"))
# reload the data
out = load(paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOverSamplefrac",
round(urbanOverSamplefrac, 4), "Big.RData"))
# Now simulate the data without a cluster effect but with the same underlying probability surface otherwise
tausq = 0
overSampDat$eaDat$trueProbDeath = overSampDat$eaDat$trueProbDeathNoNug
SRSDat$eaDat$trueProbDeath = SRSDat$eaDat$trueProbDeathNoNug
overSampDat$eaDat$died = rbinom(nrow(overSampDat$eaDat), overSampDat$eaDat$numChildren, overSampDat$eaDat$trueProbDeathNoNug)
SRSDat$eaDat$died = overSampDat$eaDat$died
overSampDatTest$eaDat$trueProbDeath = overSampDatTest$eaDat$trueProbDeathNoNug
SRSDatTest$eaDat$trueProbDeath = SRSDatTest$eaDat$trueProbDeathNoNug
overSampDatTest$eaDat$died = rbinom(nrow(overSampDatTest$eaDat), overSampDatTest$eaDat$numChildren, overSampDatTest$eaDat$trueProbDeathNoNug)
SRSDatTest$eaDat$died = overSampDatTest$eaDat$died
for(i in 1:nsimBig) {
overSampDat$clustDat[[i]]$trueProbDeath = overSampDat$clustDat[[i]]$trueProbDeathNoNug
SRSDat$clustDat[[i]]$trueProbDeath = SRSDat$clustDat[[i]]$trueProbDeathNoNug
overSampDatTest$clustDat[[i]]$trueProbDeath = overSampDatTest$clustDat[[i]]$trueProbDeathNoNug
SRSDatTest$clustDat[[i]]$trueProbDeath = SRSDatTest$clustDat[[i]]$trueProbDeathNoNug
overSampDat$clustDat[[i]]$died = overSampDat$eaDat$died[overSampClustDat$eaIs[,i]]
SRSDat$clustDat[[i]]$died = SRSDat$eaDat$died[SRSClustDat$eaIs[,i]]
overSampDatTest$clustDat[[i]]$died = overSampDatTest$eaDat$died[overSampClustDatTest$eaIs[,i]]
SRSDatTest$clustDat[[i]]$died = SRSDatTest$eaDat$died[SRSClustDatTest$eaIs[,i]]
}
# save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
#                                       round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOver",
#                                       round(urbanOverSample, 4), ".RData"))
# save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
#                                       round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "nUrbanClustersOver",
#                                       round(numClustersUrbanOversamp, 4), ".RData"))
save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOverSamplefrac",
round(urbanOverSamplefrac, 4), "Big.RData"))
overSampDat = overSampDatTest
SRSDat = SRSDatTest
save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOverSamplefrac",
round(urbanOverSamplefrac, 4), "TestBig.RData"))
load(paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOverSamplefrac",
round(urbanOverSamplefrac, 4), "Big.RData"))
overSampDat$clustDat = overSampDat$clustDat[1:nsim]
SRSDat$clustDat = SRSDat$clustDat[1:nsim]
save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOverSamplefrac",
round(urbanOverSamplefrac, 4), ".RData"))
overSampDat = overSampDatTest
SRSDat = SRSDatTest
overSampDat$clustDat = overSampDat$clustDat[1:nsim]
SRSDat$clustDat = SRSDat$clustDat[1:nsim]
save(overSampDat, SRSDat, file=paste0("simDataMultiBeta", round(beta0, 4), "margVar", round(margVar, 4), "tausq",
round(tausq, 4), "gamma", round(gamma, 4), "HHoldVar", HHoldVar, "urbanOverSamplefrac",
round(urbanOverSamplefrac, 4), "Test.RData"))
# clustDat = SRSDat$clustDat[[1]]
# clustDat = SRSDatTest$clustDat[[1]]
# clustDat = overSampDat$clustDat[[1]]
clustDat = overSampDatTest$clustDat[[1]]
eaDat = overSampDat$eaDat
obsCoords = cbind(clustDat$east, clustDat$north)
obsNs = clustDat$numChildren
obsCounts = clustDat$died
wd = getwd()
setwd("~/Google Drive/UW/Wakefield/WakefieldShared/U5MR/")
pdf("figures/exampleOverSampTestSimulationNoNug.pdf", width=8, height=8)
par(mfrow =c(2, 2))
zlim = c(0, quantile(c(eaDat$died/eaDat$numChildren, clustDat$died/clustDat$numChildren,
eaDat$trueProbDeath), probs=.975))
quilt.plot(eaDat$east, eaDat$north, eaDat$died/eaDat$numChildren, main="All Empirical Mortality Rates",
xlab="Easting", ylab="Northing", xlim=eastLim, ylim=northLim, zlim=zlim)
plotMapDat(project=TRUE)
quilt.plot(obsCoords, obsCounts/obsNs, main="Sample Empirical Mortality Rates",
xlab="Easting", ylab="Northing", xlim=eastLim, ylim=northLim, zlim=zlim)
plotMapDat(project=TRUE)
quilt.plot(eaDat$east, eaDat$north, eaDat$trueProbDeath, main="All True Mortality Rates",
xlab="Easting", ylab="Northing", xlim=eastLim, ylim=northLim, zlim=zlim)
plotMapDat(project=TRUE)
quilt.plot(obsCoords, clustDat$trueProbDeath, main="Sample True Mortality Rates",
xlab="Easting", ylab="Northing", xlim=eastLim, ylim=northLim, zlim=zlim)
plotMapDat(project=TRUE)
dev.off()
setwd("~/git/U5MR/")
runCompareModels(modelsI=1:2)
warnings
warnings()
source('~/git/U5MR/scores.R')
runCompareModels(modelsI=1:2)
warnings()
runCompareModels(modelsI=1:2, sampling="oversamp")
runCompareModels(modelsI=1:2, big=TRUE)
runCompareModels(modelsI=1:2, big=FALSE)
runCompareModels(modelsI=1:2, sampling="oversamp")
runCompareModels(modelsI=1:2, sampling="oversamp", big=TRUE)
runCompareModels(modelsI=1:2, sampling="oversamp", logit=FALSE)
runCompareModels(modelsI=1:2, sampling="oversamp", uselogit=FALSE)
source('~/git/U5MR/compareModels.R')
runCompareModels(modelsI=1:2, sampling="oversamp", useLogit=FALSE)
source('~/git/U5MR/compareModels.R')
runCompareModels(modelsI=1:2, sampling="oversamp", useLogit=FALSE)
runCompareModels(modelsI=1:2, sampling="oversamp", useLogit=TRUE)
runCompareModels(modelsI=1:2, sampling="oversamp", useLogit=TRUE, printIEvery = 100)
source('~/git/U5MR/compareModels.R')
runCompareModels(modelsI=1:2, sampling="oversamp", useLogit=TRUE, printIEvery = 100)
runCompareModels(modelsI=1:2, sampling="oversamp", useLogit=FALSE, printIEvery = 100)
source('~/git/U5MR/compareModels.R')
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=FALSE, printIEvery = 100)
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=TRUE, printIEvery = 100)
logit(.1)
logit(.06)
logit(.12)
debugSource('~/git/U5MR/compareModels.R')
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=TRUE, printIEvery = 100)
debugSource('~/git/U5MR/compareModels.R')
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=TRUE, printIEvery = 100)
debugSource('~/git/U5MR/compareModels.R')
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=TRUE, printIEvery = 100)
thisTruth
allresoverSamp$logit.estdirect
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=FALSE, printIEvery = 100)
thisTruth
allresoverSamp$logit.estdirect
expit(-1.637208)
useLogit
debugSource('~/git/U5MR/scores.R')
truth
my.est = logitNormMean(cbind(my.est, sqrt(my.var)))
my.est
truth
debugSource('~/git/U5MR/compareModels.R')
debugSource('~/git/U5MR/compareModels.R')
source('~/git/U5MR/compareModels.R')
debugSource('~/git/U5MR/compareModels.R')
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=FALSE, printIEvery = 100)
debugSource('~/git/U5MR/compareModels.R')
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=FALSE, printIEvery = 100)
truth
getSubLevelResults(truth)
source('~/git/U5MR/scores.R')
source('~/git/U5MR/scores.R')
debugSource('~/git/U5MR/compareModels.R')
debugSource('~/git/U5MR/compareModels.R')
source('~/git/U5MR/compareModels.R')
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=TRUE, printIEvery = 100)
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=FALSE, printIEvery = 100)
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=FALSE, printIEvery = 100, big=TRUE)
runCompareModels(modelsI=1:2, sampling="SRS", logitScale=FALSE, printIEvery = 100, big=TRUE)
runCompareModels(modelsI=1:2, sampling="oversamp", logitScale=FALSE, printIEvery = 100, big=TRUE)
runCompareModels(modelsI=1:2, tausq=0, sampling="SRS", logitScale=FALSE, printIEvery = 100, big=TRUE)
runCompareModels(modelsI=1:2, tausq=0, sampling="oversamp", logitScale=FALSE, printIEvery = 100, big=TRUE)
runCompareModels(modelsI=1:3, tausq=0, sampling="oversamp", logitScale=FALSE, printIEvery = 100)
runCompareModels(modelsI=1:3, tausq=0.01, sampling="oversamp", logitScale=FALSE, printIEvery = 100)
source('~/git/U5MR/scores.R')
source('~/git/U5MR/scores.R')
Count
source('~/git/U5MR/scores.R')
runCompareModels(modelsI=1:3, tausq=0.01, sampling="oversamp", logitScale=FALSE, printIEvery = 100)
debugSource('~/git/U5MR/compareModels.R')
source('~/git/U5MR/compareModels.R')
debugSource('~/git/U5MR/compareModels.R')
debugSource('~/git/U5MR/compareModels.R')
debugSource('~/git/U5MR/compareModels.R')
debugSource('~/git/U5MR/compareModels.R')
debugSource('~/git/U5MR/compareModels.R')
debugSource('~/git/U5MR/compareModels.R')
debugSource('~/git/U5MR/compareModels.R')
source('~/git/U5MR/scores.R')
source('~/git/U5MR/compareModels.R')
debugSource('~/git/U5MR/compareModels.R')
source('~/git/U5MR/scores.R')
source('~/git/U5MR/setup.R')
runCompareModels(modelsI=1:5)
source('~/git/U5MR/compareModels.R')
runCompareModels(modelsI=1:5)
getwd()
source('~/git/U5MR/runBYMTest0.01.R')
arg
?inla.os
?INLA:::inla.os
inla.os
INLA:::inla.os
source('~/git/U5MR/scores.R')
source('~/git/M9/setup.R')
source('~/git/M9/fitModelTMB.R')
source('~/git/M9/setup.R')
test = fitModelTMB(fixInflation=FALSE)
exp(0.4869621)
exp(0.3885729)
source('~/git/M9/fitModelTMB.R')
debugSource('~/git/M9/fitModelTMB.R')
test = fitModelTMB(fixInflation=FALSE, G=G, diffGPSTaper=TRUE)
betaTaper
betaTaperGPS
logphi
betasd
betasdIntercept
betaGamma
betaGammaIntercept
out$gammaPar
debugSource('~/git/M9/fitModelTMB.R')
initParams = getInitialParameters(nKnots, nKnotsVar, nKnotsGamma, logScale=TRUE, diffGPSTaper=diffGPSTaper)
out = getInputPar(initParams, fault, threshSlipDat, nKnots, diffGPSTaper=diffGPSTaper, nKnotsGPS, taperedGPSDat=TRUE,
anisotropic=TRUE, normalModel=TRUE, nKnotsVar, doVarSpline=TRUE,
includeGammaSpline=TRUE, nKnotsGamma=nKnotsGamma, includeInflation=TRUE)
logmu = out$muZeta
betaTaper = out$taperPar
betaTaperIntercept = betaTaper[1]
betaTaper = betaTaper[-1]
betaTaperGPS = out$taperParGPS
# taperParGPS = out$taperParGPS
logphi = out$phiZeta
# lambda0 = out$lambda0
logalpha = out$alpha
betasd = out$varPar
betasdIntercept = betasd[1]
betasd = betasd[-1]
betaGamma = out$gammaPar
betaGammaIntercept = betaGamma[1]
betaGamma = betaGamma[-1]
loglowInflate = out$lowInflation
loghighInflate = out$highInflation
parscale = out$parscale
parNames = out$parNames
parNamesTMB = out$parNamesTMB
nKnotsGPS * diffGPSTaper
betaGammaIntercept
betaGamma
loglowInflate
loghighInflate
parscale
parNames
parNamesTMB
source('~/git/M9/fitModel.R')
out = getInputPar(initParams, fault, threshSlipDat, nKnots, diffGPSTaper=diffGPSTaper, nKnotsGPS, taperedGPSDat=TRUE,
anisotropic=TRUE, normalModel=TRUE, nKnotsVar, doVarSpline=TRUE,
includeGammaSpline=TRUE, nKnotsGamma=nKnotsGamma, includeInflation=TRUE)
logmu = out$muZeta
betaTaper = out$taperPar
betaTaperIntercept = betaTaper[1]
betaTaper = betaTaper[-1]
betaTaperGPS = out$taperParGPS
# taperParGPS = out$taperParGPS
logphi = out$phiZeta
# lambda0 = out$lambda0
logalpha = out$alpha
betasd = out$varPar
betasdIntercept = betasd[1]
betasd = betasd[-1]
betaGamma = out$gammaPar
betaGammaIntercept = betaGamma[1]
betaGamma = betaGamma[-1]
loglowInflate = out$lowInflation
loghighInflate = out$highInflation
parscale = out$parscale
parNames = out$parNames
parNamesTMB = out$parNamesTMB
parNamesTMB
# determine which of the input parameters will be optimized
includeI = c(TRUE, TRUE, rep(doVarSpline, nKnotsVar - 1), rep(TRUE, nKnots), rep(TRUE, nKnotsGPS * diffGPSTaper), TRUE, rep(includeGammaSpline, nKnotsGamma - 1),
rep(!fixInflation, 2), TRUE, TRUE)
debugSource('~/git/M9/fitModelTMB.R')
test = fitModelTMB(fixInflation=FALSE, G=G, diffGPSTaper=TRUE)
test = fitModelTMB(fixInflation=FALSE, G=G, diffGPSTaper=TRUE)
map
diffGPSTaper
parameters
debugSource('~/git/M9/fitModelTMB.R')
test = fitModelTMB(fixInflation=FALSE, G=G, diffGPSTaper=TRUE)
map
!includeGammaSpline && length(betaGamma) != 0
map = list()
if(!includeGammaSpline && length(betaGamma) != 0)
map = c(map, list(betaGamma=rep(factor(NA), length(betaGamma))))
if(!doVarSpline)
map = c(map, list(betasd=rep(factor(NA), length(betasd))))
if(fixInflation)
map = c(map, list(loghighInflate=factor(NA), loglowInflate=factor(NA)))
if(!diffGPSTaper)
map = c(map, list(betaTaperGPS=rep(factor(NA), length(betaTaperGPS))))
map
parameters
obj <- MakeADFun(data, parameters, DLL="fitModelTMB", map=map)
obj$hessian <- TRUE
ui = rbind(c(rep(0, length(obj$par)-1 - 2 * (!fixInflation)), 1, rep(0, 2 * (!fixInflation))),
c(rep(0, length(obj$par)-1 - 2 * (!fixInflation)), -1, rep(0, 2 * (!fixInflation))))
ci = c(log(0.05), -log(20))
obj$ui = ui
obj$ci = ci
# reparameterize inputs from optim to constrOptim
obj$f = obj$fn
obj$grad = obj$gr
obj$theta = obj$par
# set optimization control parameters
controls = list(parscale=parscale)
obj$control = controls
finalFitControls = controls
finalFitControls$parscale = finalFitControls$parscale / 25
keepCalling = TRUE
lastPar = obj$theta
count = 0
allPar = matrix(NA, nrow=maxCount, ncol=length(obj$par))
objectiveValues = rep(NA, maxCount)
while(keepCalling) {
print("Beginning optimization at: ")
print(obj$theta)
# opt <- do.call("optim", obj)
opt <- do.call("constrOptim", obj)
grad = obj$gr()
if(abs(max(grad)) < 0.01 || count >= maxCount)
keepCalling = FALSE
else {
obj$par = opt$par
obj$theta = jitter(opt$par, amount = 0.1 * 0.5^count)
obj$control = finalFitControls
lastPar = opt$par
count = count + 1
}
allPar[count,] = opt$par
objectiveValues[count] = opt$value
# reorder output parameters
optParNames = names(opt$par)
logmuMLE = opt$par[which(optParNames == "logmu")]
betasdInterceptMLE = opt$par[which(optParNames == "betasdIntercept")]
betasdMLE = c(betasdInterceptMLE, opt$par[which(optParNames == "betasd")])
betaTaperInterceptMLE = opt$par[which(optParNames == "betaTaperIntercept")]
betaTaperMLE = c(betaTaperInterceptMLE, opt$par[which(optParNames == "betaTaper")])
betaGammaInterceptMLE = opt$par[which(optParNames == "betaGammaIntercept")]
betaGammaMLE = c(betaGammaInterceptMLE, opt$par[which(optParNames == "betaGamma")])
logphiMLE = opt$par[which(optParNames == "logphi")]
logalphaMLE = opt$par[which(optParNames == "logalpha")]
loglowInflateMLE = opt$par[which(optParNames == "loglowInflate")]
loghighInflateMLE = opt$par[which(optParNames == "loghighInflate")]
finalPar = c(logmuMLE=logmuMLE, betasdMLE=betasdMLE, betaTaperMLE=betaTaperMLE,
betaGammaMLE=betaGammaMLE, logphiMLE=logphiMLE, logalphaMLE=logalphaMLE,
loglowInflateMLE=loglowInflateMLE, loghighInflateMLE=loghighInflateMLE)
lambdaBasisY = getSplineBasis(fault, nKnots=nKnots, latRange=latRange)
lambdaBasisX = getSplineBasis(data.frame(list(latitude=threshSlipDat$lat)), nKnots=nKnots, latRange=latRange)
sdBasisX = getSplineBasis(data.frame(list(latitude=threshSlipDat$lat)), nKnots=nKnotsVar, latRange=latRange)
sdBasisY = getSplineBasis(fault, nKnots=nKnotsVar, latRange=latRange)
gammaBasis = getSplineBasis(data.frame(list(latitude=threshSlipDat$lat)), nKnots=nKnotsGamma, latRange=latRange)
taperVecX = taper(xDepths, exp(lambdaBasisX %*% betaTaperMLE), dStar = dStarGPS)
taperVecY = taper(faultDepths, exp(lambdaBasisY %*% betaTaperMLE), dStar = dStar)
sdVecX = exp(lambdaBasisX %*% betasdMLE)
sdVecY = exp(lambdaBasisY %*% betasdMLE)
gammaVec = exp(gammaBasis %*% betaGammaMLE)
# preview results with plot
# plot lambda and taper
latSeq = seq(latRange[1], latRange[2], l=500)
splineMat = getSplineBasis(fault=fault, nKnots=nKnots, lats=latSeq, latRange=latRange)
lambdaSeq = exp(splineMat %*% betaTaperMLE)
par(mfrow=c(1,2))
plot(latSeq, lambdaSeq, type="l", ylim=range(c(lambdaSeq, 0)))
tmp = getTaperSpline(betaTaperMLE, nKnots=nKnots, dStar=dStar, latRange=latRange, fault=fault, normalize=TRUE, logScale = TRUE)
plotFault(fault, tmp, varRange=c(0, 1))
# plot taper (on original scale and GPS scale) and standard deviation
latSeq = seq(latRange[1], latRange[2], l=500)
splineMat = getSplineBasis(fault=fault, nKnots=nKnots, lats=latSeq, latRange=latRange)
lambdaSeq = exp(splineMat %*% betaTaperMLE)
taperSeq = taper(10000, lambdaSeq, dStar = dStar)
taperSeqGPS = taper(10000, lambdaSeq, dStar = dStarGPS)
par(mfrow=c(1,2))
plot(latSeq, taperSeq, type="l", ylim=range(c(taperSeq, 0, taperSeqGPS)))
lines(latSeq, taperSeqGPS, col="blue")
legend("bottomright", c("Fault taper", "Locking rate taper"), col=c("blue", "black"), lty=1)
sdMat = getSplineBasis(data.frame(list(latitude=threshSlipDat$lat)), nKnots=nKnotsVar, lats=latSeq, latRange=latRange)
sdSeq = exp(sdMat %*% betasdMLE)
plot(latSeq, sdSeq, type="l", ylim=range(c(0, sdSeq)))
}
controls$parscale
length(controls$parscale)
length(obj$par)
obj$par
options(error = recover)
test = fitModelTMB(fixInflation=FALSE, G=G, diffGPSTaper=TRUE)
debugSource('~/git/M9/fitModelTMB.R')
test = fitModelTMB(fixInflation=FALSE, G=G, diffGPSTaper=TRUE)
controls
controls
length(controls$parscale)
length(obj$part)
length(obj$par)
obj$par
betaTaperGPS
map
compile("fitModelTMB.cpp")
obj <- MakeADFun(data, parameters, DLL="fitModelTMB", map=map)
obj$par
compile("fitModelTMB.cpp")
compile("fitModelTMB.cpp")
?compile
compile("fitModelTMB.cpp")
compile("fitModelTMB.cpp")
